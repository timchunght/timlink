package models

import (
	"log"
	"timlink/Godeps/_workspace/src/gopkg.in/mgo.v2/bson"
	"timlink/connection"
	"timlink/helpers"
	"time"
)

func RepoAllLinks() []Link {
	var links []Link

	result := connection.GetCollection("links").Find(nil).All(&links)
	if result == nil {
		return links
	} else {
		return links
	}
}

func RepoFindLink(hash string) Link {
	c := connection.GetCollection("links")
	result := Link{}
	err := c.Find(bson.M{"hash": hash}).One(&result)
	if err != nil {
		return result
		log.Fatal(err)
	}
	return result
}

func (l Link) RepoCreateLink() Link {
	c := connection.GetCollection("links")
	// This guarantees that t.Id has the bson _id generated by mongo
	l.Id = bson.NewObjectId()
	l.CreatedAt = time.Now()

	// This while loop ensures there is duplicate Hash
	for {

		hash := helpers.RandomString(6)
		count, _ := c.Find(bson.M{"hash": hash}).Count()
		if count > 0 {

		} else {

			l.Hash = hash
			break
		}
	}

	err := c.Insert(l)

	if err != nil {
		return Link{}
		log.Fatal(err)
	}
	// l.ShortUrl = "http://localhos"
	return l
}

func RepoDestroyLink(id string) error {

	return connection.GetCollection("links").Remove(bson.M{"_id": bson.ObjectIdHex(id)})

}


// func (t *Link) ParseUrl() string {
// 	resp, err := http.Get(t.Url)
//   if err != nil {
//       // panic(err)
// 	}
//   root, err := html.Parse(resp.Body)
//   if err != nil {
//     // panic(err)
//   }
//   title, ok := scrape.Find(root, scrape.ByTag(atom.Title))
// 	if ok {
// 	  // Print the title
// 	  t.Title = scrape.Text(title)
// 		return scrape.Text(title)
// 	} else {
		
// 		return ""
// 	}
// }
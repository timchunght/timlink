package models

import (
	"log"
	"timlink/Godeps/_workspace/src/gopkg.in/mgo.v2/bson"
	"timlink/connection"
	// "reflect"
	// "fmt"
)

func RepoAllItems() []Item {
	var items []Item

	result := connection.GetCollection("items").Find(nil).All(&items)
	if result == nil {
		return items
	} else {
		// fmt.Println(reflect.TypeOf(result))
		return items
	}
}

func RepoFindItem(id string) Item {
	c := connection.GetCollection("items")
	result := Item{}
	err := c.Find(bson.M{"_id": bson.ObjectIdHex(id)}).One(&result)
	if err != nil {
		return result
		log.Fatal(err)
	}
	return result
}

//this is bad, I don't think it passes race condtions
func RepoCreateItem(t Item) Item {
	c := connection.GetCollection("items")

	// This guarantees that t.Id has the bson _id generated by mongo
	id := bson.NewObjectId()
	t.Id = id
	err := c.Insert(t)
	if err != nil {
		return Item{}
		log.Fatal(err)
	}
	return t
}

func RepoDestroyItem(id string) error {

	// if t.Id == id {
	// 	items = append(items[:i], items[i+1:]...)
	// 	return nil
	// }
	return connection.GetCollection("items").Remove(bson.M{"_id": bson.ObjectIdHex(id)})

}

package main

import (
	"gopkg.in/mgo.v2/bson"
	"log"
	// "reflect"
)

func RepoFindItem(id string) Item {
	c := getCollection("items")	
	result := Item{}
	err = c.Find(bson.M{"_id": bson.ObjectIdHex(id)}).One(&result)
	if err != nil {
		return result
		log.Fatal(err)
	}
	return result
}

//this is bad, I don't think it passes race condtions
func RepoCreateItem(t Item) Item {
	c := getCollection("items")

	// This guarantees that t.Id has the bson _id generated by mongo
	id := bson.NewObjectId()
	t.Id = id
	err = c.Insert(t)
	if err != nil {
		return Item{}
		log.Fatal(err)
	}
	return t
}

// func RepoDestroyItem(id int) error {
// 	for i, t := range items {
// 		if t.Id == id {
// 			items = append(items[:i], items[i+1:]...)
// 			return nil
// 		}
// 	}
// 	return fmt.Errorf("Could not find Item with id of %d to delete", id)
// }
